openapi: "3.0.0"
info:
 title: "REST API для социальной сети ВКонтакте"
 description: "Тренируюсь создавать документацию  API"
 version: "0.1"
 termsOfService: "https://test.vk/terms"
 contact:
   name: "13csy"
   url: "https://vk.com/club223314637/"
   email: "13csy@mail.ru"
 license:
   name: "Apache 2.0"
servers:
- url: https://test.gigantic-server.com/v1
description: Test server
tags:
- name: user
  description: user operation
- name: post
  description: Operations about post
- name: message
  description: Operations about message 
paths:
  /user:
    post:
      tags:
        - user
      summary: Add someone as a friend
      description: Add someone as a friend
      operationId: createUser
      requestBody: 
        description: Created user object
        content:
          applicaton/json:
            schema:
              $ref: '#/components/schemas/user'
          application/xml:
            schema:
              $ref: '#/components/schemas/user'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
               $ref: '#/components/schemas/user'
  /users/{userId}:
    get:
      tags: 
       - user
      summary: View a user's users
      description: The user is directed by ID, in the response we receive data about the user in this ID
      parameters:
        - name: userId
          in: path
          description: ID of user to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
       '200':
         description: Successful operation
         content:
          application/json:
            schema:
             $ref: '#/components/schemas/user'     
          application/xml:
            schema:
             $ref: '#/components/schemas/user'
       '400':
          description: Invalid ID specified
       '404':
         description: User not found
    delete:
      tags:
        - user
      summary: Unfriends the user
      description: unfriends the user
      parameters:
       - name: api_key
         in: header
         description: ''
         required: false
         schema:
          type: string
       - name: userId
         in: path
         description: User id to delete
         required: true
         schema:
            type: integer
            format: int64
      responses:
       '400':
         description: Invalid user value
  /user/{userId}/profile:
    get:
      tags:
        - user
      summary: View user profile
      description: View user profile
      operationId: findUserByProfile
      parameters:
        - name: userId
          in: path
          description: ID of pet to update
          required: true
          schema:
            type: string
            default: available
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/user'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/user'
        '400':
          description: Invalid value
  /post:
    post:
      tags:
        - post
      summary: Publishing a post to the feed
      description: Publishing a post to the feed
      operationId: createPost
      parameters:
        - name: post
          in: query
          description: ID of user to update 
          required: true
          schema:
            type: string
            format: int64
            default: available
        - name: additionalmetadata
          in: query
          description: Additional Metadata
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiResponse'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiResponse'
  /post/postByTags:
    get:
      tags:
        - post
      summary: Finds a post by tags
      description: Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
      operationId: findPostsByTags
      parameters:
        - name: tags
          in: query
          description: Tags to filter by
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/post'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/post'
        '400':
          description: Invalid value
  /message:   
    post:
      tags:
        - message
      summary: Write a message 
      operationId: Sending and reading messages in dialogs and chats
      requestBody:
        content:
          applicaton/json:
            schema:
              $ref: '#/components/schemas/message'
          application/xml:
            schema:
              $ref: '#/components/schemas/message'
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: messages per hour allowed by the user
              schema:
                type: string
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
  /message/{messageId}:  
    get:
      tags:
        - message
      summary: View user dialogues and chats
      description: The message is directed by ID user, in the response we receive data about the message in this ID user
      operationId: getMessageById
      parameters:
        - name: messageId
          in: path
          description: ID of message that needs to be fetched
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: messages per hour allowed by the user
              schema:
                type: string
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid ID supplied

components:
  schemas:
    user:
      required:
        - name
        - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 38
        nicname:
          type: string
          example: Kozemyka38
        firstName:
          type: string
          example: Anna
        lastName:
          type: string
          example: Ivanova
        password:
          type: string
          example: '12345'
        city:
          type: string
          example: Tula
        email:
          type: string
          example: anna@mail.ru
        phone:
          type: string
          example: '+9(999)999-99-99'
        userStatus:
          type: integer
          description: User Status
          format: int32
          example:  available
      xml:
         name: user
    tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: tag
    post:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 568
        userid:
          type: integer
          format: int64
          example: 698214
        created:
          type: string
          example: userId
        wallid:
          type: integer
          format: int64
          example: 455
      xml:
        name: post
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
    message:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 568
        userid: 
          type: integer
          format: int64
          example: 698214
        randomid: 
          type: number
          format: int64
          example: 100
        message: 
          type: string