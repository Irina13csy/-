openapi: "3.0.0"
info:
 title: Swagger Petstore - OpenAPI 3.0
 description: Яндекс Такси
 version: "0.1"
 termsOfService: "https://yandex_taxi.ru/terms"
 contact:
   name: "13csy"
   url: "https://yandex_taxi.ru"
   email: "13csy@mail.ru"
 license:
   name: "Apache 2.0"
servers:
- url: https://yandex_taxi.ru/terms
description: Test server
tags:
 - name: passenger
   description: Passenger profile
 - name: driver
   description: Taxi driver profile
 - name: taxiService
   description: Taxi service information
paths:
  /passenger/{passengername}:
    get:
      tags:
        - passenger
      summary: View passenger profile
      description: ''
      operationId: getPassengerByName
      parameters:
        - name: passengername
          in: path
          description: The name that needs to be fetched. Use passenger1 for testing.
          required: true
          schema:
           type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Passenger'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Passenger'
        '400':
          description: Invalid passengername supplied
        '404':
          description: Passenger not found
  /driver/{drivername}:
    get:
      tags:
        - driver
      summary: View driver profile
      description: ''
      operationId: getdriverByName
      parameters:
        - name: drivername
          in: path
          description: The name that needs to be fetched. User2 for testing.
          required: true
          schema:
           type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Driver'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Driver'
        '400':
          description: Invalid passengername supplied
        '404':
          description: Driver not found          
  /taxiService/route:
    post:
      tags:
        - taxiService    
      summary: Trip calculation parameters
      description: Calculate trip cost and time
      operationId: placeRoute
      parameters:
        - name: from
          in: query
          description: Pick-up address
          schema:
            type: string
        - name: to
          in: query
          description: End point of the route
          schema:
            type: string
        - name: shipDate
          in: query
          description: Date and time of sending
          schema:
            format: date-time
        - name: tariff  
          in: query
          description: tariff selection
          schema:
            type: string
            default: economy
            enum:
              - economy
              - comfort
              - comfort+
              - children
              - fastest
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Route'
            application/xml:
              schema: 
                $ref: '#/components/schemas/Route'
        '400':
          description: Invalid route selection value
  /taxiService/order:
    post:
      tags:
        - taxiService
      summary: Place a taxi order
      description: Order a taxi in the app
      operationId: placeOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
          application/xml:
            schema:
              $ref: '#/components/schemas/Order'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order1'
            application/xml:
              schema: 
                $ref: '#/components/schemas/Order1'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
  /taxiService/findByStatus:
    get:
      tags:
        - taxiService
      summary: Finds a ride by status
      description: Multiple status values can be provided with comma separated strings
      operationId: getFindByStatus
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: false
          explode: true
          schema:
            type: string
            default: active
            enum:
              - active
              - completed
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Route'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Route'
        '400':
          description: Invalid status value
  /taxiService/order/{orderId}:
    get:
      tags:
       - taxiService
      summary: Watch the ride
      description: Returns one trip
      operationId: getOrderById
      parameters:
        - name: orderId
          in: path
          description: ID of order that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found        
    delete:
      tags:
        - taxiService
      summary: Delete taxi order by ID
      description: For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
      operationId: deleteOrderById
      parameters:
        - name: orderId
          in: path
          description: ID of the order that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
components:
  schemas:  
    Passenger:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        passengername:
          type: string
          example: thePassenger
        firstName:
          type: string
          example: Николай
        lastName:
          type: string
          example: Светлаков
        role:
          type: string
          example: passenger
        email:
          type: string
          example: passenger@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'
        passengerStatus:
          type: integer
          description: passenger status
          format: int32
          example: 1
      xml:
        name: passenger
    Driver:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        passengername:
          type: string
          example: thedriver
        firstName:
          type: string
          example: Марк
        lastName:
          type: string
          example: Костяев
        role:
          type: string
          example: driver
        email:
          type: string
          example: driver@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'
        car:
          type: string
          example: желтый  Kia Rio Х578ХБ71
        driverStatus:
          type: integer
          description: driver status
          format: int32
          example: 2
      xml:
        name: driver
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        from:
          type: string
          example: г.Тула, ул. Михеева, д. 15
        where:  
          type: string
          example: г. Тула, ул. Пушкинская, д. 32
        car:
          type: string
          example: желтый  Kia Rio Х578ХБ71
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order status
          example: approved
          enum:
            - placed
            - approved
            - delivered
        full:
          type: boolean
      xml:
        name: order
    Order1:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        from:
          type: string
          example: г.Тула, ул. Михеева, д. 15
        where:  
          type: string
          example: г. Тула, ул. Пушкинская, д. 32
        car:
          type: string
          example: желтый  Kia Rio Х578ХБ71
        shipDate:
          type: string
          format: date-time
        price:
          type: integer
          example: 350 рублей
        status:
          type: string
          description: Order status
          example: approved
          enum:
            - placed
            - approved
            - delivered
        full:
          type: boolean
      xml:
        name: order1
    Route:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        from:
          type: string
          example: г.Тула, ул. Михеева, д. 15
        where:  
          type: string
          example: г. Тула, ул. Пушкинская, д. 32
        travelTime:
          type: string
          example: 10 минут
        car:
          type: string
          example: желтый  Kia Rio Х578ХБ71
        shipDate:
          type: string
          format: date-time
        price:
          type: integer
          example: 350 рублей
        tariff:
          type: string
          description: tariff selection
          example: economy
          enum:
              - economy
              - comfort
              - comfort+
              - children
              - fastest
        full:
          type: boolean
      xml:
        name: Rate
        